
//! Autogenerated weights for `pallet_parachain_xcnft_two`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro`, CPU: `ArmM1`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node-two
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_parachain_xcnft_two
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use crate as pallet_parachain_xcnft_two;

/// Weight functions for `pallet_parachain_xcnft_two`.
pub trait WeightInfo {
	fn transfer_collection_empty() -> Weight;
	fn transfer_collection_same_owner() -> Weight;
	fn transfer_collection_other_owners() -> Weight;
	fn transfer_nft() -> Weight;
	fn parse_empty_col() -> Weight;
	fn parse_same_owner_col() -> Weight;
	fn parse_diff_owner_col() -> Weight;
	fn parse_item() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `UniquesModule::Class` (r:1 w:0)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:1 w:0)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassMetadataOf` (r:1 w:0)
	/// Proof: `UniquesModule::ClassMetadataOf` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::RelevantMessagingState` (r:1 w:0)
	/// Proof: `ParachainSystem::RelevantMessagingState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_collection_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3643`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(37_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(4))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:0)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:2 w:0)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassMetadataOf` (r:1 w:0)
	/// Proof: `UniquesModule::ClassMetadataOf` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::InstanceMetadataOf` (r:1 w:0)
	/// Proof: `UniquesModule::InstanceMetadataOf` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::RelevantMessagingState` (r:1 w:0)
	/// Proof: `ParachainSystem::RelevantMessagingState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_collection_same_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `465`
		//  Estimated: `6184`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(51_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6184))
			.saturating_add(T::DbWeight::get().reads(7))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:0)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:3 w:0)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassMetadataOf` (r:1 w:0)
	/// Proof: `UniquesModule::ClassMetadataOf` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::CrossChainProposals` (r:1 w:1)
	/// Proof: `XcnftModule::CrossChainProposals` (`max_values`: None, `max_size`: Some(96000143), added: 96002618, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::NextProposalId` (r:1 w:1)
	/// Proof: `XcnftModule::NextProposalId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn transfer_collection_other_owners() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619`
		//  Estimated: `96003608`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(48_000_000, 0)
			.saturating_add(Weight::from_parts(0, 96003608))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:0)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:1 w:0)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::InstanceMetadataOf` (r:1 w:0)
	/// Proof: `UniquesModule::InstanceMetadataOf` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::RelevantMessagingState` (r:1 w:0)
	/// Proof: `ParachainSystem::RelevantMessagingState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `3643`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(5))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:1)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassAccount` (r:0 w:1)
	/// Proof: `UniquesModule::ClassAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn parse_empty_col() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3643`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:1)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:1 w:1)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::CollectionMaxSupply` (r:1 w:0)
	/// Proof: `UniquesModule::CollectionMaxSupply` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassAccount` (r:0 w:1)
	/// Proof: `UniquesModule::ClassAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Account` (r:0 w:1)
	/// Proof: `UniquesModule::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::ReceivedCollections` (r:0 w:1)
	/// Proof: `XcnftModule::ReceivedCollections` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn parse_same_owner_col() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3643`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:1)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:1 w:1)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::CollectionMaxSupply` (r:1 w:0)
	/// Proof: `UniquesModule::CollectionMaxSupply` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::ClassAccount` (r:0 w:1)
	/// Proof: `UniquesModule::ClassAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Account` (r:0 w:1)
	/// Proof: `UniquesModule::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::ReceivedCollections` (r:0 w:1)
	/// Proof: `XcnftModule::ReceivedCollections` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn parse_diff_owner_col() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3643`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `UniquesModule::Class` (r:1 w:1)
	/// Proof: `UniquesModule::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::ReceivedAssets` (r:1 w:1)
	/// Proof: `XcnftModule::ReceivedAssets` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `XcnftModule::SentAssets` (r:1 w:0)
	/// Proof: `XcnftModule::SentAssets` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Asset` (r:1 w:1)
	/// Proof: `UniquesModule::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::CollectionMaxSupply` (r:1 w:0)
	/// Proof: `UniquesModule::CollectionMaxSupply` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `UniquesModule::Account` (r:0 w:1)
	/// Proof: `UniquesModule::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	fn parse_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `358`
		//  Estimated: `3643`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
